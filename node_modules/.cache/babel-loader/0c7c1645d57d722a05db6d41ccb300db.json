{"ast":null,"code":"var _jsxFileName = \"E:\\\\calculator-react-app\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport logo from './logo.svg';\nimport './App.css';\nimport { useEffect, useState } from 'react';\nimport { last } from 'lodash';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [result, setResult] = useState(\"\");\n  const [expression, setExpression] = useState(\"\");\n  useEffect(() => {\n    setResult(expression);\n  }, [expression]);\n\n  let valid = op => {\n    let lastChar = expression.charAt(expression.length - 1);\n\n    if (lastChar == '' || lastChar == '%' || lastChar == \"/\" || lastChar == \"*\" || lastChar == \"+\" || lastChar == \"-\") {\n      return \"\";\n    }\n\n    return op;\n  };\n\n  let trim = exp => {\n    let lastChar = exp.charAt(exp.length - 1);\n\n    if (lastChar == '' || lastChar == '%' || lastChar == \"/\" || lastChar == \"*\" || lastChar == \"+\" || lastChar == \"-\") {\n      return exp.slice(0, -1);\n    }\n\n    return exp;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      id: \"result\",\n      children: result\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setExpression(\"\");\n      },\n      children: \"AC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setExpression(expression.slice(0, -1));\n      },\n      children: \"\\u2190\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"operator\",\n      onClick: () => {\n        setExpression(expression + valid('%'));\n      },\n      children: \"%\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"operator\",\n      onClick: () => {\n        setExpression(expression + valid('/'));\n      },\n      children: \"/\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setExpression(expression + 7);\n      },\n      children: \"7\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setExpression(expression + 8);\n      },\n      children: \"8\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setExpression(expression + 9);\n      },\n      children: \"9\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"operator\",\n      onClick: () => {\n        setExpression(expression + valid('*'));\n      },\n      children: \"*\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setExpression(expression + 4);\n      },\n      children: \"4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setExpression(expression + 5);\n      },\n      children: \"5\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setExpression(expression + 6);\n      },\n      children: \"6\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"operator\",\n      onClick: () => {\n        setExpression(expression + valid('-'));\n      },\n      children: \"-\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setExpression(expression + 1);\n      },\n      children: \"1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setExpression(expression + 2);\n      },\n      children: \"2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setExpression(expression + 3);\n      },\n      children: \"3\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"operator\",\n      onClick: () => {\n        setExpression(expression + valid('+'));\n      },\n      children: \"+\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      style: {\n        gridColumn: \"span 2\"\n      },\n      onClick: () => {\n        setExpression(expression + 0);\n      },\n      children: \"0\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setExpression(expression + \".\");\n      },\n      children: \".\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"operator\",\n      onClick: () => {\n        setExpression(eval(trim(expression)).toString());\n      },\n      children: \"=\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"49gTYDD7tyw9hiRmvQBOFxHc9Zc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["E:/calculator-react-app/src/App.js"],"names":["logo","useEffect","useState","last","App","result","setResult","expression","setExpression","valid","op","lastChar","charAt","length","trim","exp","slice","gridColumn","eval","toString"],"mappings":"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","sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport { useEffect, useState } from 'react';\nimport { last } from 'lodash';\n\nfunction App() {\n  const [result, setResult] = useState(\"\");\n  const [expression, setExpression] = useState(\"\");\n\n  useEffect(() => {\n    setResult(expression);\n  }, [expression]);\n\n  let valid = (op) => {\n    let lastChar = expression.charAt(expression.length-1);\n    if(lastChar=='' || lastChar=='%' || lastChar==\"/\" || lastChar==\"*\" || lastChar==\"+\" || lastChar==\"-\" ) {\n      return \"\";\n    }\n    return op;\n  };\n\n  let trim=(exp) => {\n    let lastChar = exp.charAt(exp.length-1);\n    if(lastChar=='' || lastChar=='%' || lastChar==\"/\" || lastChar==\"*\" || lastChar==\"+\" || lastChar==\"-\" ) {\n      return exp.slice(0,-1);\n    }\n    return exp;\n  }\n  return (\n    <div className=\"App\">\n      <h1 id=\"result\">{result}</h1>\n      <button onClick={() => { setExpression(\"\") }}>AC</button>\n      <button onClick={() => { setExpression(expression.slice(0, -1)) }}>&larr;</button>\n      <button className=\"operator\" onClick={() => {setExpression(expression + valid('%'))}}>%</button>\n      <button className=\"operator\" onClick={() => {setExpression(expression + valid('/'))}}>/</button>\n      <button onClick={() => { setExpression(expression + 7) }}>7</button>\n      <button onClick={() => { setExpression(expression + 8) }}>8</button>\n      <button onClick={() => { setExpression(expression + 9) }}>9</button>\n      <button className=\"operator\" onClick={() => {setExpression(expression + valid('*'))}}>*</button>\n      <button onClick={() => { setExpression(expression + 4) }}>4</button>\n      <button onClick={() => { setExpression(expression + 5) }}>5</button>\n      <button onClick={() => { setExpression(expression + 6) }}>6</button>\n      <button className=\"operator\" onClick={() => {setExpression(expression + valid('-'))}}>-</button>\n      <button onClick={() => { setExpression(expression + 1) }}>1</button>\n      <button onClick={() => { setExpression(expression + 2) }}>2</button>\n      <button onClick={() => { setExpression(expression + 3) }}>3</button>\n      <button className=\"operator\" onClick={() => {setExpression(expression + valid('+'))}}>+</button>\n      <button style={{ gridColumn: \"span 2\" }} onClick={() => { setExpression(expression + 0) }}>0</button>\n      <button onClick={() => { setExpression(expression + \".\") }}>.</button>\n      <button className=\"operator\" onClick={() => {setExpression(eval(trim(expression)).toString())}}>=</button>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}